#!/usr/bin/env perl
use 5.006;
use strict;
use warnings;

package App::Perl::Tags::Tagger;
use Perl::Tags;
use Perl::Tags::PPI;

our @ISA = qw(Perl::Tags::Naive Perl::Tags::PPI);

{
  # no ISA changing after first call
  my @parsers;
  sub get_parsers {
    my $self = shift;
    if (!@parsers) {
      foreach my $class (@ISA) {
        eval "push \@parsers, \$self->${class}::get_parsers;";
      }
      @parsers = grep defined, @parsers;
    }
    return @parsers;
  }
}

package App::Perl::Tags;
use Getopt::Long ();
use Pod::Usage qw/pod2usage/;
use File::Find ();

our $VERSION = '0.01';

=head1 SYNOPSIS

  perl-tags version 0.01. Copyright 2009, Steffen Mueller
  
  Usage: perl-tags <options> <input files or dirs...>
  Generates "perltags" files for use with your editor of choice.
  
  Options:
  -o/--outfile   Set the path/name of the output file (default: perltags)
  -d/--depth     Set the max recursion depth (recursion into "use Module", etc)
                 (default: 100 (~ infinity))

=cut

our $Outfile = 'perltags';
our $RecursionDepth = 100;
# more control is TODO
Getopt::Long::GetOptions(
  'h|help'      => sub {pod2usage();},
  'o|outfile=s' => \$Outfile,
  'd|depth=i'   => \$RecursionDepth,
);

pod2usage() unless @ARGV;

main();
exit();

sub main {
  my $ptag = App::Perl::Tags::Tagger->new(
    max_level => $RecursionDepth,
    exts      => 1,
  );

  my @files;
  File::Find::find(
    sub { push @files, $File::Find::name if -f $_ },
    @ARGV
  );

  $ptag->process(files => \@files);
  $ptag->output(outfile => $Outfile); 
  return;
}

